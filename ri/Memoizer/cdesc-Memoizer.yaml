--- !ruby/object:RDoc::RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: cache
- !ruby/object:RDoc::RI::MethodSummary 
  name: new
- !ruby/object:RDoc::RI::MethodSummary 
  name: uncache
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  body: Memoizer wraps objects to provide cached method calls.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "  class X\n    def initialize ; @tick = 0 ; end\n    def tick; @tick + 1; end\n    def memo; @memo ||= Memoizer.new(self) ; end\n  end\n\n  x = X.new\n  x.tick       #=&gt; 1\n  x.memo.tick  #=&gt; 2\n  x.tick       #=&gt; 3\n  x.memo.tick  #=&gt; 2\n  x.tick       #=&gt; 4\n  x.memo.tick  #=&gt; 2\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  body: You can also use to cache collections of objects to gain code speed ups.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "  points = points.collect{|point| Memoizer.cache(point)}\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  body: "After our algorithm has finished using points, we want to get rid of these Memoizer objects. That's easy:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "   points = points.collect{|point| point.<em>self</em> }\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  body: "Or if you prefer (it is ever so slightly safer):"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "   points = points.collect{|point| Memoizer.uncache(point)}\n"
constants: []

full_name: Memoizer
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: __self__
- !ruby/object:RDoc::RI::MethodSummary 
  name: method_missing
name: Memoizer
superclass: Object

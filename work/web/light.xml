<?xml version="1.0" encoding="ISO-8859-1" ?>
<?xml-stylesheet href="layout.xsl" type="text/xsl" ?>

<content>

<div class="blurb">
  I have a Tip for You

  <div class="desc">
    Here we are. Some fresh light on some neat insights.
  </div>
</div>

<div class="page">

<!--
  <div style="text-align: center; margin-top: 10px; margin-bottom: 30px;">
    <img src="img/SPYlights.png" style="padding-left: 30px;"/>
  </div>
-->

  <div class="spotlight" id="string_margin">

    <div class="spy">
      <span class="spot">I Spy</span> String#margin
    </div>

    <p>Perhaps you've come across that occasional need to assign a string that was more pictorial
        in character than textual. [ Pun intended :-) ] You've tried Ruby's various built string constructors,
        including those groovy HERE documents, you even tried letting the HERE text butt up against column
        zero. Ick! In the end you either had line after line of <code>str &lt;&lt; "...."</code>, counted "\n"s
        or said, "Heck wit it!". And loaded from a file. Well, no longer! Facets contains a great little
        String method called #margin. It works like this:</p>

    <pre>
    x = %Q{
          | This
          |     is
          |       margin controlled!
          }.margin
    </pre>

    <p>Of course you can  use HERE documents if you prefer.</p>

    <pre>
    x = &lt;&lt;-HERE.margin
          | This
          |     is
          |       margin controlled!
          HERE
    </pre>

    <p>If you dislike the particular deliminator '|', or actually need to start lines with that character,
        then just pick another.</p>

    <pre>
    x = %Q{ This
          -     is
          -       margin controlled too!
          }.margin
    </pre>

    <p>The trick? It uses the first non-whitespace character on the 2nd line(tm). Clever, eh?</p>

    <p>But wait. There's more! #margin also takes a parameter, with which you can specify the number of
        extra spaces to insert in place of the deliminator. So even if you need to push some ascii art
        text over 30 characters, there's no need for all that whitespace. Just specify the number.</p>

    <p>Hope you've enjoyed this Spotlight. Now you too can produce nice and readable margin controlled
        strings in your code too with ease!</p>

  </div>

  <div class="spotlight" id="integer_times_collect">

    <div class="spy">
      <span class="spot">I Spy</span> Integer#times_collect
    </div>

    <p>The method #collect, or its alias #map if your prefer, is one of the most useful methods
      in Rubyland. You see it all the time. Unfortunately it isn't applicable to a number of common
      variants of iteration. One of these is Integer#times. So Facets provided just such a method.</p>

    <pre>
        require 'facet/integer/times_collect'

        bottles = 99.times_collect { |i|
          "Bottle of Beer No. #{i}"
        }
    </pre>

    <p>This is also aliased as <code>times_map</code>. But if either of these method names strikes you
      as too long then you might find this alternate (required separately) more convenient:</p>

    <pre>
        require 'facet/integer/of'

        bottles = 99.of { |i|
          "Bottle of Beer No. #{i}"
        }
    </pre>

    <p>Take one down, pass it around!</p>

  </div>

  <div class="spotlight" id="enumerablepass">

    <div class="spy">
      <span class="spot">I Spy</span> EnumerablePass
    </div>

    <p>[NOTE: <i>This module used to be called EnumerableArgs.</i>]</p>

    <p>Has it ever occurred to you that you can't define an #each method which takes parameters
    and have it work with the Enumerable mixin? It's true. Try it and you'll get an ArgumentError.
    Enumerable's methods just weren't designed to pass through any parameters to #each.
    Well, if you've never thought about it before, I suppose it's never been a bother.
    But if you're one of the unlucky few who has actually tried to do so, probably not thinking much
    of it, you know just how frustrating it is. You are reduced to writing your own #find, #map, #select
    and the many other normally eager-to-mix methods of Enumerable.</p>

    <p>No Worries. EnumerablePass is here. Simply include it into your class and it will take
    care of the rest. It's quite nearly 100% compatible to Enumerable in every way. So you
    shouldn't miss a beat.</p>

    <p>Here's a simply example of how EnumberablePass can be useful.</p>

    <pre>
      class &lt;&lt; ObjectSpace
        include EnumerablePass
        alias :each, :each_object
      end
    </pre>

    <p>With the above it becomes possible to use all the familiar Enumerable methods
    when looking through Ruby's object space!</p>

  </div>

</div>
</content>


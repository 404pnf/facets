--- !ruby/object:RDoc::RI::ModuleDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:RDoc::Markup::Flow::RULE 
  width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  body: "This is a simple reimplementation of the core Enumerable module to allow the methods to take and pass-on arbitrary arguments to the underlying #each call. This library uses Enumerator and scans Enumerable so it can alwasy stay in sync."
- !ruby/struct:RDoc::Markup::Flow::P 
  body: "NOTE Any Enumerable method with a negative arity cannot do pass arguments due to ambiguity in the argument count. So the methods #inject and #zip do NOT work this way, but simply work as they do in Enumerable. The method #find (and #detect) though has been made to work by removing its rarely used optional parameter and providing instead an optional keyword parameter (:ifnone =&gt; ...). Please keep these difference in mind."
- !ruby/struct:RDoc::Markup::Flow::VERB 
  body: "  require 'enumargs'\n\n  class T\n    include Enumerable::Arguments\n    def initialize(arr)\n      @arr = arr\n    end\n    def each(n)\n      arr.each{ |e| yield(e+n) }\n    end\n  end\n\n  t = T.new([1,2,3])\n  t.collect(4)\n  #=&gt; [5,6,7]\n"
constants: []

full_name: Enumerable
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: accumulate
- !ruby/object:RDoc::RI::MethodSummary 
  name: cluster_by
- !ruby/object:RDoc::RI::MethodSummary 
  name: collect_with_index
- !ruby/object:RDoc::RI::MethodSummary 
  name: commonality
- !ruby/object:RDoc::RI::MethodSummary 
  name: compact_collect
- !ruby/object:RDoc::RI::MethodSummary 
  name: compact_map
- !ruby/object:RDoc::RI::MethodSummary 
  name: count
- !ruby/object:RDoc::RI::MethodSummary 
  name: defer
- !ruby/object:RDoc::RI::MethodSummary 
  name: divide
- !ruby/object:RDoc::RI::MethodSummary 
  name: duplicates
- !ruby/object:RDoc::RI::MethodSummary 
  name: each_by
- !ruby/object:RDoc::RI::MethodSummary 
  name: elementwise
- !ruby/object:RDoc::RI::MethodSummary 
  name: entropy
- !ruby/object:RDoc::RI::MethodSummary 
  name: every
- !ruby/object:RDoc::RI::MethodSummary 
  name: every!
- !ruby/object:RDoc::RI::MethodSummary 
  name: ewise
- !ruby/object:RDoc::RI::MethodSummary 
  name: filter
- !ruby/object:RDoc::RI::MethodSummary 
  name: frequency
- !ruby/object:RDoc::RI::MethodSummary 
  name: graph
- !ruby/object:RDoc::RI::MethodSummary 
  name: group_by
- !ruby/object:RDoc::RI::MethodSummary 
  name: ideal_entropy
- !ruby/object:RDoc::RI::MethodSummary 
  name: inject!
- !ruby/object:RDoc::RI::MethodSummary 
  name: map_detect
- !ruby/object:RDoc::RI::MethodSummary 
  name: map_send
- !ruby/object:RDoc::RI::MethodSummary 
  name: map_with_index
- !ruby/object:RDoc::RI::MethodSummary 
  name: mash
- !ruby/object:RDoc::RI::MethodSummary 
  name: mode
- !ruby/object:RDoc::RI::MethodSummary 
  name: modulate
- !ruby/object:RDoc::RI::MethodSummary 
  name: none?
- !ruby/object:RDoc::RI::MethodSummary 
  name: nonuniq
- !ruby/object:RDoc::RI::MethodSummary 
  name: occur
- !ruby/object:RDoc::RI::MethodSummary 
  name: one?
- !ruby/object:RDoc::RI::MethodSummary 
  name: per
- !ruby/object:RDoc::RI::MethodSummary 
  name: probability
- !ruby/object:RDoc::RI::MethodSummary 
  name: split
- !ruby/object:RDoc::RI::MethodSummary 
  name: sum
- !ruby/object:RDoc::RI::MethodSummary 
  name: take
- !ruby/object:RDoc::RI::MethodSummary 
  name: threaded_map
- !ruby/object:RDoc::RI::MethodSummary 
  name: threaded_map_send
- !ruby/object:RDoc::RI::MethodSummary 
  name: to_h
- !ruby/object:RDoc::RI::MethodSummary 
  name: to_h_assoc
- !ruby/object:RDoc::RI::MethodSummary 
  name: to_h_auto
- !ruby/object:RDoc::RI::MethodSummary 
  name: to_h_flat
- !ruby/object:RDoc::RI::MethodSummary 
  name: to_h_multi
- !ruby/object:RDoc::RI::MethodSummary 
  name: to_h_splat
- !ruby/object:RDoc::RI::MethodSummary 
  name: uniq_by
name: Enumerable
